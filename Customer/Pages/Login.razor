@page "/login"
@using Customer.DTOs.Auth
@using Customer.Services
@inject AuthSVC authSVC
@inject LocalStorageSVC localStorageSVC
@inject NavigationManager Navigation

<div class="container" style="padding-top: 50px; padding-bottom: 120px">
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
            <div class="border px-5 py-5 rounded-1 bg-body-tertiary">
                <EditForm Model="@loginModel" >
                    <h3 class="text-center fw-bold text-primary">Welcome back</h3>
                    <h5 class="mb-5 text-center">Sign In to Your Account</h5>

                    <DataAnnotationsValidator />

                    <div class="form-group mb-3">
                        <label>Email address:</label>
                        <InputText @bind-Value="loginModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Password:</label>
                        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <!-- 2 column grid layout for inline styling -->
                    <div class="row mb-4">
                        <div class="col">
                            <!-- Checkbox -->
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="form2Example31" checked />
                                <label class="form-check-label" for="form2Example31"> Remember me </label>
                            </div>
                        </div>

                        <div class="col text-end">
                            <!-- Simple link -->
                            <a href="#!">Forgot password?</a>
                        </div>
                    </div>

                    <!-- Submit button -->
                    <button type="button" @onclick = "LoginAsync"
                        class="btn btn-primary btn-block mb-4 w-100 text-uppercase fw-bold rounded-1">
                        Signin
                    </button>

                    <!-- Register buttons -->
                    <div class="text-center">
                        <p>Not a member? <a href="/register">Register</a></p>
                        <p>or sign up with:</p>
                        <button type="button" data-mdb-button-init data-mdb-ripple-init
                            class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-facebook-f"></i>
                        </button>

                        <button type="button" data-mdb-button-init data-mdb-ripple-init
                            class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-google"></i>
                        </button>

                        <button type="button" data-mdb-button-init data-mdb-ripple-init
                            class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-twitter"></i>
                        </button>

                        <button type="button" data-mdb-button-init data-mdb-ripple-init
                            class="btn btn-link btn-floating mx-1">
                            <i class="fab fa-github"></i>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="col-md-3"></div>
    </div>
</div>

@code{
    public LoginModel loginModel { get; set; } = new LoginModel();

    public async Task LoginAsync()
    {
        var tokenModel = await authSVC.LoginAsync(loginModel);
        if (tokenModel != null)
        {
            await localStorageSVC.SetItemAsync("authToken", tokenModel.Jwt!);
            await localStorageSVC.SetItemAsync("username", loginModel.Username);
            Navigation.NavigateTo("/", true);
        }
    }
}